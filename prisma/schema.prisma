generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String  @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  userId                   String  @map("user_id") @db.Uuid
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  name          String?
  email         String?      @unique
  emailVerified DateTime?    @map("email_verified")
  image         String?
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  accounts      Account[]
  memberships   Membership[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Organization {
  id          String       @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  name        String?      @db.VarChar(255)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  memberships Membership[]

  @@map("organizations")
}

model Membership {
  id             String         @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  role           MembershipRole
  organizationId String         @map("organization_id") @db.Uuid
  userId         String         @map("user_id") @db.Uuid
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  organization   Organization   @relation(fields: [organizationId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  @@unique([userId, organizationId])
  @@map("memberships")
}

model Order {
  id           String    @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  user_id      String    @db.Uuid
  status       String
  order_type   String
  payment_type String
  total        Decimal   @db.Decimal(10, 2)
  tax          Decimal   @db.Decimal(10, 2)
  ordered_at   DateTime  @db.Timestamptz(6)
  paid_at      DateTime? @db.Timestamptz(6)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  updated_at   DateTime  @default(now()) @db.Timestamptz(6)

  @@map("orders")
}

model Product {
  id            String    @id @default(dbgenerated("uuid_generate_v1mc()")) @db.Uuid
  title         String
  subtitle      String?
  description   String?
  handle        String?   @db.VarChar(255)
  thumbnail     String?
  created_at    DateTime  @default(now()) @db.Timestamptz(6)
  updated_at    DateTime  @default(now()) @db.Timestamptz(6)
  deleted_at    DateTime? @db.Timestamptz(6)
  metadata      Json?
  collection_id String?   @db.Uuid
  type          String?   @db.VarChar(255)
  status        String    @default("draft")
  external_id   String?

  @@map("products")
}

enum MembershipRole {
  OWNER
  MEMBER

  @@map("membership_roles")
}
