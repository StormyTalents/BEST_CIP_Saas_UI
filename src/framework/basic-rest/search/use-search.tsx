import { JsonApiResult, Product } from "@framework/types";
import { API_ENDPOINTS } from "@framework/utils/api-endpoints";
import http from "@framework/utils/http";
import { useRouter } from "next/router";
import { QueryFunction, useQuery } from "react-query";

// Generated by https://quicktype.io

type SearchParam = {
  page: number;
  pageSize: number;
  q?: string;
};

const fetchSearch: QueryFunction<
  JsonApiResult<Product>,
  [string, SearchParam]
> = async ({ queryKey }) => {
  const [key, params] = queryKey;
  return http
    .get(key, {
      params: {
        "page[number]": params.page,
        "page[size]": params.pageSize,
        q: params.q,
      },
    })
    .then((r) => r.data);
};

export const useSearchQuery = (options: SearchParam) => {
  // router.query is undefined when the page is rendered for the first time
  // need to wait for isReady, otherwise the fetch fn will be executed before the router.query is set
  const { isReady } = useRouter();
  return useQuery([API_ENDPOINTS.SEARCH, options], fetchSearch, {
    enabled: isReady,
  });
};
